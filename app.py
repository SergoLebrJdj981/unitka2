import streamlit as st
import pandas as pd
from io import BytesIO
from datetime import datetime

st.set_page_config(page_title="FORESTLOOK: –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª–∏", layout="wide")
st.title("üìä FORESTLOOK ‚Äî –û—Ç—á—ë—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ Excel-—Ñ–∞–π–ª–∞: Wildberries-–æ—Ç—á—ë—Ç –∏ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫—É")

wb_file = st.file_uploader("üì§ –û—Ç—á—ë—Ç Wildberries (.xlsx)", type="xlsx")
unit_file = st.file_uploader("üì§ –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ (.xlsx)", type="xlsx")

def classify(row):
    if row["–ü—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"] < 10:
        return "–¢–µ—Å—Ç"
    if row["–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"] < 0 or row["ROI"] < 20:
        return "–ë–∞–ª–ª–∞—Å—Ç"
    if row["ROI"] < 40:
        return "–í–∏—Ç—Ä–∏–Ω–∞"
    if row["ROI"] >= 60 and row["–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"] >= 300:
        return "–§–ª–∞–≥–º–∞–Ω"
    return "–û–±—ã—á–Ω—ã–π"

if wb_file and unit_file:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ WB-–æ—Ç—á—ë—Ç–∞
        wb_sheets = pd.read_excel(wb_file, sheet_name=None)
        if "–¢–æ–≤–∞—Ä—ã" not in wb_sheets:
            st.error("‚ùå –í —Ñ–∞–π–ª–µ WB –Ω–µ—Ç –ª–∏—Å—Ç–∞ '–¢–æ–≤–∞—Ä—ã'")
            st.stop()

        wb_data = wb_sheets["–¢–æ–≤–∞—Ä—ã"].iloc[1:].copy()
        wb_data.columns = wb_sheets["–¢–æ–≤–∞—Ä—ã"].iloc[0]

        required_columns = [
            "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞, ‚ÇΩ",
            "–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–µ–Ω—å, —à—Ç",
            "–û—Å—Ç–∞—Ç–∫–∏ —Å–∫–ª–∞–¥ –í–ë, —à—Ç", "–û—Å—Ç–∞—Ç–∫–∏ –ú–ü, —à—Ç"
        ]
        for col in required_columns:
            if col not in wb_data.columns:
                st.error(f"‚ùå –í –æ—Ç—á—ë—Ç–µ WB –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏: {col}")
                st.stop()

        df_wb = wb_data[required_columns].copy()
        df_wb.columns = ["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "–ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å", "–û—Å—Ç–∞—Ç–æ–∫ –í–ë", "–û—Å—Ç–∞—Ç–æ–∫ –ú–ü"]
        df_wb["–ü—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"] = (pd.to_numeric(df_wb["–ü—Ä–æ–¥–∞–∂ –≤ –¥–µ–Ω—å"], errors="coerce") * 7).round()

        # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏
        df_wb = df_wb[df_wb["–ü—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"] > 0]

        # –ó–∞–≥—Ä—É–∑–∫–∞ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏
        df_unit = pd.read_excel(unit_file)
        expected_cols = ["–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞", "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å", "ROI", "–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"]
        for col in expected_cols:
            if col not in df_unit.columns:
                st.error(f"‚ùå –í —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏: {col}")
                st.stop()

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
        df_merged = pd.merge(df_wb, df_unit, how="left", left_on="–ê—Ä—Ç–∏–∫—É–ª", right_on="–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞")

        df_merged["–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é"] = (
            df_merged["–ü—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é"] * df_merged["–ü—Ä–∏–±—ã–ª—å —Å 1 —à—Ç"]
        ).round(2)
        df_merged["–°—Ç–∞—Ç—É—Å"] = df_merged.apply(classify, axis=1)

        st.success("‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤")
        st.dataframe(df_merged, use_container_width=True)

        def convert_df(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name="–û—Ç—á—ë—Ç FORESTLOOK")
            return output.getvalue()

        excel_data = convert_df(df_merged)
        filename = f"FORESTLOOK_–æ—Ç—á–µ—Ç_{datetime.today().strftime('%Y-%m-%d')}.xlsx"

        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Excel-–æ—Ç—á—ë—Ç",
            data=excel_data,
            file_name=filename,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
